# reject null if p<0.05
library("TDAstats")
statVector<-c(1,5,6,10,11,13,15,16)
statsComp<-function(m){
return(c(m)[statVector])
}
genStats<-function(magn,numVar,r,sampleSize,numStats){
randL<-runif(numVar*r*sampleSize,-magn,magn)
sample<-array(randL,dim=c(r,numVar,sampleSize))
statsM<-matrix(,nrow = sampleSize, ncol = numStats)
for(i in 1:sampleSize){
stats<-statsComp((matrix(sample[,,i]))%*%t(matrix(sample[,,i])))
statsM[i,]<-stats
}
return(statsM)
}
stats4<-genStats(1,4,4,1000,length(statVector))
stats3<-genStats(1,4,3,1000,length(statVector))
stats2<-genStats(1,4,2,1000,length(statVector))
stats1<-genStats(1,4,1,1000,length(statVector))
summary(stats4[,statId])
statId=8
summary(stats4[,statId])
summary(stats3[,statId])
summary(stats2[,statId])
summary(stats1[,statId])
statId=5
summary(stats4[,statId])
summary(stats3[,statId])
summary(stats2[,statId])
summary(stats1[,statId])
numStats=7
statsComp<-function(m){
return(c(m[1,1]+m[3,3],m[2,2],m[4,4],m[1,2],m[2,3],m[3,4],m[1,4]))
}
genStats<-function(magn,numVar,r,sampleSize,numStats){
randL<-runif(numVar*r*sampleSize,-magn,magn)
sample<-array(randL,dim=c(r,numVar,sampleSize))
statsM<-matrix(,nrow = sampleSize, ncol = numStats)
for(i in 1:sampleSize){
stats<-statsComp((matrix(sample[,,i]))%*%t(matrix(sample[,,i])))
statsM[i,]<-stats
}
return(statsM)
}
stats4<-genStats(1,4,4,1000,numStats)
stats3<-genStats(1,4,3,1000,numStats)
stats2<-genStats(1,4,2,1000,numStats)
stats1<-genStats(1,4,1,1000,numStats)
statId=8
summary(stats4[,statId])
statId=5
summary(stats4[,statId])
summary(stats3[,statId])
summary(stats2[,statId])
summary(stats1[,statId])
View(stats1)
View(stats1)
statVector<-c(1,5,6,10,11,13,15,16)
statsComp<-function(m){
return(c(m)[statVector])
}
genStats<-function(magn,numVar,r,sampleSize,numStats){
randL<-runif(numVar*r*sampleSize,-magn,magn)
sample<-array(randL,dim=c(r,numVar,sampleSize))
statsM<-matrix(,nrow = sampleSize, ncol = numStats)
for(i in 1:sampleSize){
stats<-statsComp((matrix(sample[,,i]))%*%t(matrix(sample[,,i])))
statsM[i,]<-stats
}
return(statsM)
}
stats4<-genStats(1,4,4,1000,length(statVector))
stats3<-genStats(1,4,3,1000,length(statVector))
stats2<-genStats(1,4,2,1000,length(statVector))
stats1<-genStats(1,4,1,1000,length(statVector))
write.csv(stats4, "G18-4.csv", row.names=FALSE)
stats4<-genStats(1,4,4,5000,length(statVector))
stats3<-genStats(1,4,3,5000,length(statVector))
stats2<-genStats(1,4,2,5000,length(statVector))
stats1<-genStats(1,4,1,5000,length(statVector))
write.csv(stats4, "G18-4.csv", row.names=FALSE)
write.csv(stats3, "G18-3.csv", row.names=FALSE)
write.csv(stats2, "G18-2.csv", row.names=FALSE)
write.csv(stats1, "G18-1.csv", row.names=FALSE)
numStats=7
statsComp<-function(m){
return(c(m[1,1]+m[3,3],m[2,2],m[4,4],m[1,2],m[2,3],m[3,4],m[1,4]))
}
genStats<-function(magn,numVar,r,sampleSize,numStats){
randL<-runif(numVar*r*sampleSize,-magn,magn)
sample<-array(randL,dim=c(r,numVar,sampleSize))
statsM<-matrix(,nrow = sampleSize, ncol = numStats)
for(i in 1:sampleSize){
stats<-statsComp((matrix(sample[,,i]))%*%t(matrix(sample[,,i])))
statsM[i,]<-stats
}
return(statsM)
}
#Generate sufficient stats for matrices of different rank
stats4<-genStats(1,4,4,5000,numStats)
stats3<-genStats(1,4,3,5000,numStats)
stats2<-genStats(1,4,2,5000,numStats)
stats1<-genStats(1,4,1,5000,numStats)
write.csv(stats4, "G17-4.csv", row.names=FALSE)
write.csv(stats3, "G17-3.csv", row.names=FALSE)
write.csv(stats2, "G17-2.csv", row.names=FALSE)
write.csv(stats1, "G17-1.csv", row.names=FALSE)
numStats=7
statsComp<-function(m){
return(c(m[1,1]+m[2,2],m[3,3],m[4,4],m[1,2],m[2,3],m[3,4],m[1,4]))
}
genStats<-function(magn,numVar,r,sampleSize,numStats){
randL<-runif(numVar*r*sampleSize,-magn,magn)
sample<-array(randL,dim=c(r,numVar,sampleSize))
statsM<-matrix(,nrow = sampleSize, ncol = numStats)
for(i in 1:sampleSize){
stats<-statsComp((matrix(sample[,,i]))%*%t(matrix(sample[,,i])))
statsM[i,]<-stats
}
return(statsM)
}
tesPts=runif(4*1*1,-1,1)
testSample<-array(tesPts,dim=c(1,4,1))
testMatrix=matrix(testSample[,,1])%*%t(matrix(testSample[,,1]))
qr(testMatrix)$rank
#Generate sufficient stats for matrices of different rank
stats4<-genStats(1,4,4,5000,numStats)
stats3<-genStats(1,4,3,5000,numStats)
stats2<-genStats(1,4,2,5000,numStats)
stats1<-genStats(1,4,1,5000,numStats)
write.csv(stats4, "G16-4.csv", row.names=FALSE)
write.csv(stats3, "G16-3.csv", row.names=FALSE)
write.csv(stats2, "G16-2.csv", row.names=FALSE)
write.csv(stats1, "G16-1.csv", row.names=FALSE)
numStats=6
statsComp<-function(m){
return(c(m[1,1]+m[2,2]+m[3,3],m[4,4],m[1,2],m[2,3],m[3,4],m[1,4]))
}
genStats<-function(magn,numVar,r,sampleSize,numStats){
randL<-runif(numVar*r*sampleSize,-magn,magn)
sample<-array(randL,dim=c(r,numVar,sampleSize))
statsM<-matrix(,nrow = sampleSize, ncol = numStats)
for(i in 1:sampleSize){
stats<-statsComp((matrix(sample[,,i]))%*%t(matrix(sample[,,i])))
statsM[i,]<-stats
}
return(statsM)
}
#Generate sufficient stats for matrices of different rank
stats4<-genStats(1,4,4,5000,numStats)
stats3<-genStats(1,4,3,5000,numStats)
stats2<-genStats(1,4,2,5000,numStats)
stats1<-genStats(1,4,1,5000,numStats)
write.csv(stats4, "G15-4.csv", row.names=FALSE)
write.csv(stats3, "G15-3.csv", row.names=FALSE)
write.csv(stats2, "G15-2.csv", row.names=FALSE)
write.csv(stats1, "G15-1.csv", row.names=FALSE)
numStats=35
statsComp<-function(m){
return(c(diag(m),c(m[1:5,6:10])))
}
genStats<-function(magn,numVar,r,sampleSize,numStats){
randL<-runif(numVar*r*sampleSize,-magn,magn)
sample<-array(randL,dim=c(r,numVar,sampleSize))
statsM<-matrix(,nrow = sampleSize, ncol = numStats)
for(i in 1:sampleSize){
stats<-statsComp((matrix(sample[,,i]))%*%t(matrix(sample[,,i])))
statsM[i,]<-stats
}
return(statsM)
}
stats10<-genStats(1,10,10,1000,numStats)
statsComp<-function(m){
return(c(c(diag(m)),c(m[1:5,6:10])))
}
genStats<-function(magn,numVar,r,sampleSize,numStats){
randL<-runif(numVar*r*sampleSize,-magn,magn)
sample<-array(randL,dim=c(r,numVar,sampleSize))
statsM<-matrix(,nrow = sampleSize, ncol = numStats)
for(i in 1:sampleSize){
stats<-statsComp((matrix(sample[,,i]))%*%t(matrix(sample[,,i])))
statsM[i,]<-stats
}
return(statsM)
}
stats10<-genStats(1,10,10,1000,numStats)
magn=1
numVar=10
r=10
sampleSize=1
numStats=35
randL<-runif(numVar*r*sampleSize,-magn,magn)
sample<-array(randL,dim=c(r,numVar,sampleSize))
